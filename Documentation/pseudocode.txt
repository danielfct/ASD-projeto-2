########## State Machine ##########

State: mySequenceNumber, currentLeader, replicas, majority, client, myPromise, sequenceNumberOfAcceptedOperation, 
acceptedOperation, currentN, operationsToExecute, serviceMap, prepareAcks, resultsBackup

Upon init() do:
 currentLeader <- null
 replicas <- {}
 majority <- POSITIVE_INFINITY
 client <- null // reference to the (single) multi-thread client
 myPromise <- -1
 currentN <- 0 // position to be filled in operationsToExecute 
 operationsToExecute <- <null,null> // operation to be executed in each position (map of type <position,operation>)
 keepAlive <- 0
 serviceMap <- <null,null> // hashmap with results of put operations
 canExecute <- false // indicates if it's possible to execute an operations ( false if there aren't any or there are gaps between them: x x _ x )
 paxos <- null
 prepareAcks <- {}
 resultsBackup <- <null,null> // map of type <reqid,string>. it keeps the result of request id to avoid repeating the same operation

Upon start(n, membership, clt) do:
 mySequenceNumber <- n
 replicas <- membership
 majority <- ceil((|replicas| + 1) / 2)
 client <- clt
 trigger tryToElectMeAsLeader()
 paxos <- getMultiPaxosInstance(self, mySequenceNumber, replicas)
 setup periodic timer isLeaderAlive(T)
 setup periodic timer executeOperations(T)

Upon join(n, contactNode, clt) do:
 mySequenceNumber <- n
 client <- clt
 send(contactNode, ADD_REPLICA, self)

Upon put(id, key, value) do:
 operation <- {type: "PUT", param1: key, param2: value, reqid: id}
 send(currentLeader, PROPOSE, operation)

Upon get(key) do:
 value <- serviceMap.getValueOfKey(key)
 if value != null && canExecute then
  send(client, RESPONSE, value)
  cancel timer get_from_leader
 else setup timer get_from_leader(T, key)

Upon response(value) do:
 send(client, RESPONSE, value)

Upon add_replica(rep) do:
 if currentLeader = self then
  operation <- {type: "ADD_REPLICA", param1: rep, param2: null}
  send(self, PROPOSE, operation)
 else send(currentLeader, ADD_REPLICA, rep)

Upon propose(operation) do:
 if (resultsBackup.contains(operation.reqid)) then {
  value <- resultsBackup.get(operation.reqid)
  send(sender, RESPONSE, value)
 } else {
  send(sender, RESPONSE, serviceMap.get(key))
  paxos.propose(currentN,operation)
 }
 
Upon prepare(N,n) do:
 if n > myPromise then
  myPromise <- n
  send(sender, PREPARE_OK, n, mySequenceNumber, currentN)
 else send(sender, RESTART, n)

Upon prepare_ok(s, N, n) do:
 if (s == mySequenceNumber) then {
  prepareAcks <- prepareAcks U {(n, N)}
  if |prepareAcks| >= majority then
   currentN <- getPairWithMaxn(prepareacks).N + 1
   mySequenceNumber <- 0
   for each rep € replicas do
    send(rep, SET_LEADER, self)
   operation <- {type: "REMOVE_REPLICA", param1: currentLeader, param2: null}
   send(self, PROPOSE, operation)
   currentLeader <- self
   setup periodic timer leaderAlive(T)
 }

Upon accept(N, n, operation) do:
 paxos.accept(N, n, operation)

Upon accept_ok(N, n) do:
 paxos.accept_ok(N, n)

Upon decided(N, operation) do:
 operationsToExecute.put(N,operation)
 currentN <- currentN + 1

Upon executeOperations() do:
 if operationsToExecute.keySet().size > 0 then {
  it <- operationsToExecute.keySet().iterator()
  while(it.hasNext()) {
   pos <- it.next()
   nxtpos <- it.next()
   if nextpos != null && (nextpos - pos) != 1 then
    canExecute <- false // there are gaps between operations sequence: x x _ x, we have to wait till we get that gap filled in
    return;
  }
  it <- operationsToExecute.keySet().iterator()
  while(it.hasNext()) {
   pos <- it.next()
   operation <- operationsToExecute.getValueOfKey(pos)
   if operation.type == "PUT" then
    serviceMap.put(operation.param1,operation.param2)
   else if operation.type == "ADD_REPLICA" then
    rep <- operation.param1
    replicas <- replicas U {rep}
    majority <- ceil((|replicas| + 1) / 2)
    paxos.addReplica(rep)
    if (currentLeader == self) then
     send(rep, COPY_STATE, replicas, serviceMap) // TODO: change this...
   else 
    replicas <- replicas \ {operation.param1}
    majority <- ceil((|replicas| + 1) / 2)
    paxos.removeReplica(rep)
   it.removeLast() // remove pair <key,value> from operationsToExecute, since we have already executed the operation
  }
  canExecute <- true

Upon tryToElectMeAsLeader() do:
 for each rep € replicas do
  sender(rep, PREPARE, currentN, mySequenceNumber)

Upon isLeaderAlive() do:
 if (currentLeader != null && currentLeader != self && currentTime() > keepAlive + TTL) then
  trigger tryToElectMeAsLeader()

Upon set_leader(leader) do:
 if (currentLeader = self && leader != self) then
  mySequenceNumber <- mySequenceNumber + |replicas|
  currentLeader <- leader

Upon no_op() do:
 keepAlive <- currentTime()

Upon leaderAlive() do:
 if currentLeader = self then
  for each rep € replicas do
   send(rep, NO_OP)
 else cancel timer leaderAlive

Upon copy_state(reps, smap) do:
 replicas <- reps
 serviceMap <- smap
 majority <- ceil((|replicas| + 1) / 2)
 setup periodic timer isLeaderAlive(T)
 setup periodic timer executeOperations(T)

Upon restart(n) do:
 if (n == mySequenceNumber) then {
  mySequenceNumber = mySequenceNumber + |replicas|
  paxos.setSequenceNumber(mySequenceNumber)
  prepareAcks <- {}
 }

Upon setSequenceNumber(n) do:
 mySequenceNumber <- n

########## State Machine ##########


########## Multi Paxos ##########

State: mySequenceNumber, replicas, majority, acceptAcks, currentProposedOperation, 
myPromise, sequenceNumberOfAcceptedOperation, acceptedOperation, canPropose, operationsToPropose

Upon init(smachine,reps,sequenceNumber) do:
 stateMachine <- smachine
 mySequenceNumber <- sequenceNumber
 replicas <- reps
 majority <- (|replicas| + 1) / 2
 prepareAcks <- {}
 acceptAcks <- 0
 currentProposedOperation <- (null, null, null, null) // tuple of type (operation, param1, param2?, reqid?), where param2 and id (of request) are optional
 myPromise <- -1
 acceptedPosition <- 0
 operationsToPropose <- {}
 canPropose <- true
 setup periodic timer doPropose(T)

Upon propose(N,operation) do:
 operationsToPropose <- operationsToPropose U {(N,operation)}

Upon doPropose() do:
  if (canPropose && |operationsToPropose| > 0) then {
   canPropose <- false
   entry <- operationsToPropose.getHead()
   N <- entry.N
   operation <- entry.operation
   currentProposedOperation <- operation
   for each rep € replicas do
    send(rep, ACCEPT, N, mySequenceNumber, currentProposedOperation)
   setup timer restart(T, mySequenceNumber)
  }

Upon accept(N, n, operation) do:
 keepAlive <- currentTime()
 if n >= myPromise then {
  acceptedPosition <- N
  sequenceNumberOfAcceptedOperation <- n
  acceptedOperation <- operation
  send(sender, ACCEPT_OK, N, n)
 } else send(sender, RESTART, n)

Upon accept_ok(N, n) do:
 acceptAcks <- acceptAcks + 1
 if |acceptAcks| >= majority then {
  cancel timer restart
  for each rep € replicas do
   send(rep, DECIDED, currentN, currentProposedOperation)
  operationsToPropose.removeHead()
  canPropose <- true
 }
 
Upon restart(n) do:
 if (n == mySequenceNumber) then {
  prepareAcks <- {}
  acceptAcks <- 0
  sequenceNumber <- sequenceNumber + |replicas|
  stateMachine.setSequenceNumber(sequenceNumber)
  canPropose <- true
  sender(self, PROPOSE, currentProposedOperation)
 }

Upon addReplica(rep) do:
 replicas <- replicas U {rep}
 majority <- (|replicas| + 1) / 2

Upon removeReplica(rep) do:
 replicas <- replicas \ {rep}
 majority <- (|replicas| + 1) / 2

Upon setPromise(promise) do:
 myPromise <- promise

Upon setSequenceNumber(n) do:
 mySequenceNumber <- n

########## Multi Paxos ##########